blueprint:
  name: HASP p[x].b[y] displays the current state with icon and colors
  description: '

    # Description


    A HASP button displays the current state on the right with a dynamic 
    icon on the left and (optional) colors.


    ![Preview](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/hasp_Display_Temperature_with_Icon_and_Colors.png)


    ## HASP Page and Button reference


    <details>


    This automation is designed to work with the full-width buttons found on pages
    1-3


    | Pages 1-3 |

    |-----------|

    | ![Pages 1-3](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p1-p3_4buttons.png)
    |


    </details>


    ## Nextion color codes


    <details>


    The Nextion environment utilizes RGB 565 encoding.  [Use this handy convertor](https://nodtem66.github.io/nextion-hmi-color-convert/index.html)
    to select your colors and convert to the RGB 565 format.


    Here are some example colors:


    | Color  | Code  |

    |--------|-------|

    | White  | 65535 |

    | Black  | 0     |

    | Grey   | 25388 |

    | Red    | 63488 |

    | Green  | 2016  |

    | Blue   | 31    |

    | Yellow | 65504 |

    | Orange | 64512 |

    | Brown  | 48192 |


    </details>

    '
  domain: automation
  input:
    haspdevice:
      name: HASP Device
      description: Select the HASP device
      selector:
        device:
          integration: mqtt
          manufacturer: HASwitchPlate
          model: HASPone v1.0.0
    hasppage:
      name: HASP Page
      description: Select the HASP page (1-3) for the temperature. Refer to the HASP
        Page and Button reference above.
      default: 1
      selector:
        number:
          min: 1.0
          max: 3.0
          mode: slider
          unit_of_measurement: page
          step: 1.0
    haspbutton:
      name: HASP Button
      description: Select the HASP button (4-7) for the temperature. Refer to the
        HASP Page and Button reference above.
      default: 4
      selector:
        number:
          min: 4.0
          max: 7.0
          mode: slider
          unit_of_measurement: button
          step: 1.0
    weather_provider:
      name: Weather provider
      description: Select the weather provider to obtain the current outdoor temperature.  If
        a temperature sensor is selected below, that will override this selection.
      default:
      selector:
        entity:
          domain: weather
    temperature_sensor:
      name: Temperature sensor
      description: Select a temperature sensor.  If selected, this state of this sensor
        will be displayed instead of the weather provider selected above.
      default:
      selector:
        entity:
          domain: sensor
    temperature_attribute:
      name: Temperature sensor state or attribute to monitor
      description: Enter `state` to track the state of the sensor above, or enter
        an attribute name if the sensor has a specific attribute you want to track.  Most
        uses will leave this set to `state`.
      default: state
      selector:
        text: {}
    suffix_select:
      name: Temperature display suffix
      description: Suffix for temperature display.
      default: °
      selector:
        select:
          options:
          - No suffix
          - °
          - °F
          - °C
    thermometer_empty_color:
      name: Thermometer empty color
      description: Icon color for an empty thermometer in Nextion RGB565 format (see
        "Nextion color codes" above for reference). -1 = Current theme foreground
        color, or 2047 = Ice blue
      default: 2047
      selector:
        number:
          min: -1.0
          max: 65535.0
          mode: slider
          step: 1.0
    temperature_empty_icon:
      name: Temperature empty icon
      description: Icon for an empty thermometer
      default: 
      selector:
        text: {}
    thermometer_quarter_threshold:
      name: Thermometer one quarter threshold
      description: Temperatures above this threshold will show a one-quarter full
        thermometer.  Below, show an empty thermometer.
      default: 0
      selector:
        number:
          min: -20.0
          max: 125.0
          mode: slider
          step: 1.0
    thermometer_quarter_color:
      name: Thermometer one quarter color
      description: Icon color for a one-quarter full thermometer in Nextion RGB565
        format. -1 = Current theme foreground color, or 31 = Blue
      default: 31
      selector:
        number:
          min: -1.0
          max: 65535.0
          mode: slider
          step: 1.0
    temperature_quarter_icon:
      name: Temperature one quarter icon
      description: Icon for a one-quarter thermometer
      default: 
      selector:
        text: {}
    thermometer_half_threshold:
      name: Thermometer half threshold
      description: Temperatures above this threshold will show a half full thermometer.  This
        value must be higher than the value selected above.
      default: 32
      selector:
        number:
          min: -10.0
          max: 125.0
          mode: slider
          step: 1.0
    thermometer_half_color:
      name: Thermometer half color
      description: Icon color for a half full thermometer in Nextion RGB565 format.
        -1 = Current theme foreground color, or 1536 = Green
      default: 1536
      selector:
        number:
          min: -1.0
          max: 65535.0
          mode: slider
          step: 1.0
    temperature_half_icon:
      name: Temperature half icon
      description: Icon for a half thermometer
      default: 
      selector:
        text: {}
    thermometer_three_quarter_threshold:
      name: Thermometer three quarter threshold
      description: Temperatures above this threshold will show a three-quarters full
        thermometer.  This value must be higher than the value selected above.
      default: 80
      selector:
        number:
          min: 0.0
          max: 125.0
          mode: slider
          step: 1.0
    thermometer_three_quarter_color:
      name: Thermometer three quarter color
      description: Icon color for a three-quarter full thermometer in Nextion RGB565
        format. -1 = Current theme foreground color, or 64512 = Orange
      default: 64512
      selector:
        number:
          min: -1.0
          max: 65535.0
          mode: slider
          step: 1.0
    temperature_three_quarter_icon:
      name: Temperature three quarter icon
      description: Icon for a three quarter thermometer
      default: 
      selector:
        text: {}
    thermometer_full_threshold:
      name: Thermometer full threshold
      description: Temperatures above this threshold will show a full thermometer.  This
        value must be higher than the value selected above.
      default: 95
      selector:
        number:
          min: 10.0
          max: 125.0
          mode: slider
          step: 1.0
    thermometer_full_color:
      name: Thermometer full color
      description: Icon color for a full thermometer in Nextion RGB565 format. -1
        = Current theme foreground color, or 63488 = Red
      default: 63488
      selector:
        number:
          min: -1.0
          max: 65535.0
          mode: slider
          step: 1.0
    temperature_full_icon:
      name: Temperature full icon
      description: Icon for a full thermometer
      default: 
      selector:
        text: {}
    colortemp:
      name: Colorize temperature text
      description: Also apply icon colors to text
      default: false
      selector:
        boolean: {}
    roundtemp:
      name: Round sensor values to nearest integer
      description: Enable this if you don't want decimal places involved
      default: true
      selector:
        boolean: {}
  source_url: https://github.com/rebel7580/Home-Assistant/blob/master/hasp_Display_State_with_Icon_and_Colors.yaml
mode: parallel
max_exceeded: silent
variables:
  haspname: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"\
    ^sensor\\.\") -%}\n    {{- entity|regex_replace(find=\"^sensor\\.\", replace=\"\
    \", ignorecase=true)|regex_replace(find=\"_sensor(?:_\\d+|)$\", replace=\"\",\
    \ ignorecase=true) -}}\n  {%- endif -%}\n{%- endfor -%}"
  haspsensor: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"\
    ^sensor\\..+_sensor(?:_\\d+|)$\") -%}\n    {{ entity }}\n  {%- endif -%}\n{%-\
    \ endfor -%}"
  hasppage: !input 'hasppage'
  haspbutton: !input 'haspbutton'
  weather_provider: !input 'weather_provider'
  temperature_sensor: !input 'temperature_sensor'
  temperature_attribute: !input 'temperature_attribute'
  suffix_select: !input 'suffix_select'
  thermometer_empty_color: !input 'thermometer_empty_color'
  temperature_empty_icon: !input 'temperature_empty_icon'
  thermometer_quarter_threshold: !input 'thermometer_quarter_threshold'
  thermometer_quarter_color: !input 'thermometer_quarter_color'
  temperature_quarter_icon: !input 'temperature_quarter_icon'
  thermometer_half_threshold: !input 'thermometer_half_threshold'
  thermometer_half_color: !input 'thermometer_half_color'
  temperature_half_icon: !input 'temperature_half_icon'
  thermometer_three_quarter_threshold: !input 'thermometer_three_quarter_threshold'
  thermometer_three_quarter_color: !input 'thermometer_three_quarter_color'
  temperature_three_quarter_icon: !input 'temperature_three_quarter_icon'
  thermometer_full_threshold: !input 'thermometer_full_threshold'
  thermometer_full_color: !input 'thermometer_full_color'
  temperature_full_icon: !input 'temperature_full_icon'
  colortemp: !input 'colortemp'
  roundtemp: !input 'roundtemp'
  haspobject: '{{ "p[" ~ hasppage ~ "].b[" ~ haspbutton ~ "]" }}'
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" ~ haspobject }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  temperature_value: "{%- if temperature_sensor|lower == \"none\" -%}\n  {{- state_attr(weather_provider,\
    \ \"temperature\") -}}\n{%- elif temperature_attribute|lower == \"state\" -%}\n\
    \  {{- states(temperature_sensor) -}}\n{%- else -%}\n  {{- state_attr(temperature_sensor,\
    \ temperature_attribute) -}}\n{%- endif -%}"
  temperature: "{%- if roundtemp == true -%}\n  {{- temperature_value | round -}}\n\
    {%- else -%}\n  {{- temperature_value -}}\n{%- endif -%}"
  icon: "{%- set temp = temperature|int -%} {%- if temp <= thermometer_quarter_threshold|int\
    \ -%}\n  {{ temperature_empty_icon }}\n{%- elif temp < thermometer_half_threshold|int -%}\n  {{ temperature_quarter_icon }}\n{%- elif temp\
    \ < thermometer_three_quarter_threshold|int -%}\n  {{ temperature_half_icon }}\n{%- elif temp < thermometer_full_threshold|int\
    \ -%}\n  {{ temperature_three_quarter_icon }}\n{%- else -%}\n  {{ temperature_full_icon }}\n{%- endif -%}"
  suffixstring: '{% if suffix_select != ''No suffix'' %}{{ suffix_select }}{% endif
    %}'
  text: '{{temperature}}{{suffixstring}}'
  font: 10
  ypos: '{{(haspbutton|int - 4) * 67 + 2}}'
  xpos: 0
  iconwidth: 40
  iconheight: 65
  iconfont: 8
  xcen: 2
  ycen: 1
  activepage: "{%- set activepage = namespace() -%} {%- for entity in device_entities(haspdevice)\
    \ -%}\n  {%- if entity|regex_search(\"^number\\..*_active_page(?:_\\d+|)$\") -%}\n\
    \    {%- set activepage.entity=entity -%}\n  {%- endif -%}\n{%- endfor -%} {%\
    \ if states(activepage.entity)|lower == \"none\" %}-1{% else %}{{ states(activepage.entity)\
    \ | int }}{% endif %}"
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb"
    }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb"
    }}'
  selectedfg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)\
    \ -%}\n  {%- if entity|regex_search(\"^light\\..*_selected_foreground_color(?:_\\\
    d+|)$\") -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor\
    \ -%} {%- set brightness = state_attr(color.source, \"brightness\")|int / 255\
    \ -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int\
    \ -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int\
    \ -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int\
    \ -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int\
    \ }}"
  selectedbg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)\
    \ -%}\n  {%- if entity|regex_search(\"^light\\..*_selected_background_color(?:_\\\
    d+|)$\") -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor\
    \ -%} {%- set brightness = state_attr(color.source, \"brightness\")|int / 255\
    \ -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int\
    \ -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int\
    \ -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int\
    \ -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int\
    \ }}"
  unselectedfg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)\
    \ -%}\n  {%- if entity|regex_search(\"^light\\..*_unselected_foreground_color(?:_\\\
    d+|)$\") -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor\
    \ -%} {%- set brightness = state_attr(color.source, \"brightness\")|int / 255\
    \ -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int\
    \ -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int\
    \ -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int\
    \ -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int\
    \ }}"
  unselectedbg: "{%- set color = namespace() -%} {%- for entity in device_entities(haspdevice)\
    \ -%}\n  {%- if entity|regex_search(\"^light\\..*_unselected_background_color(?:_\\\
    d+|)$\") -%}\n    {%- set color.source=entity -%}\n  {%- endif -%}\n{%- endfor\
    \ -%} {%- set brightness = state_attr(color.source, \"brightness\")|int / 255\
    \ -%} {%- set red=(state_attr(color.source, \"rgb_color\")[0] * brightness)|int\
    \ -%} {%- set green=(state_attr(color.source, \"rgb_color\")[1] * brightness)|int\
    \ -%} {%- set blue=(state_attr(color.source, \"rgb_color\")[2] * brightness)|int\
    \ -%} {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int\
    \ }}"
  tempcolor: "{%- set temp = temperature|int -%} {%- if temp <= thermometer_quarter_threshold|int\
    \ -%}\n  {%- set color = thermometer_empty_color -%}\n{%- elif temp < thermometer_half_threshold|int\
    \ -%}\n  {%- set color = thermometer_quarter_color -%}\n{%- elif temp < thermometer_three_quarter_threshold|int\
    \ -%}\n  {%- set color = thermometer_half_color -%}\n{%- elif temp < thermometer_full_threshold|int\
    \ -%}\n  {%- set color = thermometer_three_quarter_color -%}\n{%- else -%}\n \
    \ {%- set color = thermometer_full_color -%}\n{%- endif -%} {%- if color|int <\
    \ 0 -%}\n  {{- selectedfg -}}\n{%- else -%}\n  {{- color -}}\n{%- endif -%}"
  textcolor: "{%- if colortemp == true -%}\n  {{- tempcolor -}}\n{%- else -%}\n  {{-\
    \ selectedfg -}}\n{%- endif -%}"
trigger_variables:
  haspdevice: !input 'haspdevice'
  haspname: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"\
    ^sensor\\.\") -%}\n    {{- entity|regex_replace(find=\"^sensor\\.\", replace=\"\
    \", ignorecase=true)|regex_replace(find=\"_sensor(?:_\\d+|)$\", replace=\"\",\
    \ ignorecase=true) -}}\n  {%- endif -%}\n{%- endfor -%}"
  haspsensor: "{%- for entity in device_entities(haspdevice) -%}\n  {%- if entity|regex_search(\"\
    ^sensor\\..+_sensor(?:_\\d+|)$\") -%}\n    {{ entity }}\n  {%- endif -%}\n{%-\
    \ endfor -%}"
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb"
    }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb"
    }}'
  weather_provider: !input 'weather_provider'
  temperature_sensor: !input 'temperature_sensor'
  entityid: '{%- if temperature_sensor|lower == \"none\" -%}\n  {{- weather_provider -}}\n{%- else -%}\n  {{- temperature_sensor -}}'
trigger:
- platform: state
  entity_id: '{{entityid}}'
- platform: template
  value_template: '{{ is_state(haspsensor, ''ON'') }}'
- platform: homeassistant
  event: start
- platform: mqtt
  topic: '{{jsontopic}}'
- platform: mqtt
  topic: '{{selectedfgtopic}}'
- platform: mqtt
  topic: '{{selectedbgtopic}}'
- platform: mqtt
  topic: '{{unselectedfgtopic}}'
- platform: mqtt
  topic: '{{unselectedbgtopic}}'
condition:
- condition: template
  value_template: '{{ is_state(haspsensor, ''ON'') }}'
action:
- choose:
  - conditions:
    - condition: template
      value_template: "{{-\n  (trigger is not defined)\nor\n  (trigger.platform is\
        \ none)\nor\n  ((trigger.platform == 'homeassistant') and (trigger.event ==\
        \ 'start'))\nor\n  ((trigger.platform == 'template') and (trigger.entity_id\
        \ == haspsensor) and (trigger.to_state.state == 'ON'))\n-}}"
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '["{{haspobject}}.font={{font}}", "{{haspobject}}.xcen={{xcen}}",
          "{{haspobject}}.ycen={{ycen}}", "{{haspobject}}.pco={{textcolor}}", "{{haspobject}}.bco={{selectedbg}}",
          "{{haspobject}}.pco2={{unselectedfg}}", "{{haspobject}}.bco2={{unselectedbg}}",
          "{{haspobject}}.txt=\"{{text}} \"" {%- if activepage|int == hasppage|int
          -%} ,"delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""
          {%- endif -%}]'
  - conditions:
    - condition: template
      value_template: '{{ (trigger.platform == "state") and (trigger.entity_id ==
        weather_provider) }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '["{{haspobject}}.pco={{textcolor}}", "{{haspobject}}.txt=\"{{text}}
          \"" {%- if activepage|int == hasppage|int -%} ,"delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""
          {%- endif -%}]'
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == "mqtt" }}'
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ (trigger.topic == jsontopic) and trigger.payload_json
            is defined }}'
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ (trigger.topic == jsontopic ) and (trigger.payload_json.event
                == haspobject ) and (trigger.payload_json.value == "OFF") and (activepage|int
                == hasppage|int)}}'
            sequence:
            - service: mqtt.publish
              data:
                topic: '{{jsoncommandtopic}}'
                payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""]'
          - conditions:
            - condition: template
              value_template: '{{ (trigger.topic == jsontopic ) and (trigger.payload_json.event
                == "page" ) and (trigger.payload_json.value == hasppage|int) }}'
            sequence:
            - service: mqtt.publish
              data:
                topic: '{{jsoncommandtopic}}'
                payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == selectedfgtopic }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{commandtopic}}.pco'
            payload: '{{trigger.payload}}'
        - condition: template
          value_template: '{{ activepage|int == hasppage|int }}'
        - delay: '00:00:00.5'
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == selectedbgtopic }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{commandtopic}}.bco'
            payload: '{{trigger.payload}}'
        - condition: template
          value_template: '{{ activepage|int == hasppage|int }}'
        - delay: '00:00:00.5'
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == unselectedfgtopic }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{commandtopic}}.pco2'
            payload: '{{trigger.payload}}'
        - condition: template
          value_template: '{{ activepage|int == hasppage|int }}'
        - delay: '00:00:00.5'
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == unselectedbgtopic }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{commandtopic}}.bco2'
            payload: '{{trigger.payload}}'
        - condition: template
          value_template: '{{ activepage|int == hasppage|int }}'
        - delay: '00:00:00.5'
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '["delay=1","xstr {{xpos}},{{ypos}},{{iconwidth}},{{iconheight}},{{iconfont}},{{tempcolor}},0,1,1,3,\"{{icon}}\""]'
